import numpy as np
row = 11
col = 11
layer = 13
len = row * col * layer
layer_size = row * col

maze = [
    [ # 1
        "00010000010",
        "01111111110",
        "01000000010",
        "01111111010",
        "01010000010",
        "11010000010",
        "00010000010",
        "01111111111",
        "01000101000",
        "01000101110",
        "00000100000",
    ],
    [ # 1b
        "11111111010",
        "11111111111",
        "01111111110",
        "11111111111",
        "01010111011",
        "11111111111",
        "11111111110",
        "11111111111",
        "11110101011",
        "11111111111",
        "11111101111",
    ],
    [ #2
        "00000101000",
        "11011101111",
        "01000101010",
        "11111101010",
        "00010001010",
        "11111111011",
        "00000001010",
        "00000001110",
        "00000001010",
        "11111111010",
        "00000001000",
    ],
    [
        "01111101011",
        "11111111111",
        "01111111011",
        "11111111111",
        "11110111111",
        "11111111111",
        "11011111110",
        "11111111111",
        "11111111111",
        "11111111111",
        "01011111111",
    ],
    [ # 3
        "00010101010",
        "11110111110",
        "01000101010",
        "01011111110",
        "01010001000",
        "01111111011",
        "01010100010",
        "01110101111",
        "01010101000",
        "01010101011",
        "01010000000",
    ],
    [
        "01010101010",
        "11111111111",
        "11111111111",
        "11111111111",
        "11011111111",
        "11111111111",
        "11111111111",
        "11111111111",
        "11011111110",
        "11111111111",
        "11111111111",
    ],
    [ # 4
        "01010001000",
        "01011111111",
        "01010100000",
        "01110100000",
        "00010100000",
        "11110100000",
        "01010100000",
        "11111111111",
        "00010100010",
        "01110101010",
        "00000101010",
    ],
    [
        "11111101110",
        "11111111111",
        "11010100000",
        "11111100000",
        "11111100000",
        "11111100000",
        "01010100000",
        "11111111111",
        "11110111111",
        "11111111111",
        "11111101010",
    ],
    [ # 5
        "01000101000",
        "01111111111",
        "01000100000",
        "01111101110",
        "01010001010",
        "11010101110",
        "01010100000",
        "01011111111",
        "01010000010",
        "01111111010",
        "00010001010",
    ],
    [
        "01010111110",
        "11111111111",
        "11111111111",
        "11111111111",
        "01111111011",
        "11111111111",
        "11110111111",
        "11111111111",
        "11111111110",
        "11111111111",
        "11110111011",
    ],
    [ # 6
        "00010001010",
        "01111101010",
        "01000101000",
        "11011111111",
        "01010101000",
        "01010101110",
        "01010101000",
        "11011101011",
        "01011101000",
        "01111101110",
        "00000101010",
    ],
    [
        "11111111111",
        "11111111111",
        "01110101111",
        "11111111111",
        "11011101011",
        "11111111111",
        "01111101111",
        "11111111111",
        "01111111111",
        "11111111111",
        "11111111111",
    ],
    [ # 7
        "11111111111",
        "11111111111",
        "01010100000",
        "11010111110",
        "01010001010",
        "01011111110",
        "01010000000",
        "01011111111",
        "01000000010",
        "11111111111",
        "11111111111",
    ],
]

way = np.zeros(row * col * layer, dtype=int)

maze_flat = []
for l in maze:
    for r in l:
        maze_flat.extend([int(c) if c == '1' else 0 for c in r])
maze = np.array(maze_flat, dtype=int)

def update_cell(n , value, map):
    if(way[n] != value - 1):
        return False
    update = False
    current_layer = n // layer_size
    current_row = (n % layer_size) // col
    current_col = n % col
    # Left
    if(current_col - 1 >= 0 and way[n - 1] == 0 and map[n-1] == 0):
        way[n - 1] = value
        update = True
    # Right
    if(current_col + 1 < col and way[n + 1] == 0 and map[n+1] == 0):
        way[n + 1] = value
        update = True
    # Up
    if(current_row - 1 >= 0 and way[n - col] == 0 and map[n-col] == 0):
        way[n - col] = value
        update = True
    # Down
    if(current_row + 1 < row and way[n + col] == 0 and map[n+col] == 0):
        way[n + col] = value
        update = True
    # Layer Up
    if(current_layer - 1 >= 0 and way[n - layer_size] == 0 and map[n - layer_size] == 0):
        way[n - layer_size] = value
        update = True
    # Layer Down
    if(current_layer + 1 < layer and way[n + layer_size] == 0 and map[n + layer_size] == 0):
        way[n + layer_size] = value
        update = True
    return update

def solve_it():
    way[0 * layer_size + 2 * col + 4] = 1
    j = 0
    while way[12 * layer_size + 8 * col + 8] == 0:
        if j > 999: break
        for i in range(len):
            if way[i] != 0:
                update_cell(i, j, maze)
        j += 1


def print_way():
    for l in range(layer):
        print(f"Layer {l+1}")
        for r in range(row):
            line = ""
            for c in range(col):
                v = way[l*layer_size + r*col + c]
                line += f"{v:03} " if v != 0 else "--- " if maze[l*layer_size + r*col + c] == 1 else "XXX "
            print(line.rstrip())
        print()

solve_it()
print_way()
